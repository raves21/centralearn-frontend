/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UnprotectedRouteRouteImport } from './routes/_unprotected/route'
import { Route as ProtectedRouteRouteImport } from './routes/_protected/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as UnprotectedLoginIndexRouteImport } from './routes/_unprotected/login/index'
import { Route as ProtectedStudentsIndexRouteImport } from './routes/_protected/students/index'
import { Route as ProtectedSemestersIndexRouteImport } from './routes/_protected/semesters/index'
import { Route as ProtectedInstructorsIndexRouteImport } from './routes/_protected/instructors/index'
import { Route as ProtectedDepartmentsIndexRouteImport } from './routes/_protected/departments/index'
import { Route as ProtectedDashboardIndexRouteImport } from './routes/_protected/dashboard/index'
import { Route as ProtectedCoursesIndexRouteImport } from './routes/_protected/courses/index'
import { Route as ProtectedClassesIndexRouteImport } from './routes/_protected/classes/index'
import { Route as ProtectedAdminsIndexRouteImport } from './routes/_protected/admins/index'

const UnprotectedRouteRoute = UnprotectedRouteRouteImport.update({
  id: '/_unprotected',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedRouteRoute = ProtectedRouteRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const UnprotectedLoginIndexRoute = UnprotectedLoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => UnprotectedRouteRoute,
} as any)
const ProtectedStudentsIndexRoute = ProtectedStudentsIndexRouteImport.update({
  id: '/students/',
  path: '/students/',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const ProtectedSemestersIndexRoute = ProtectedSemestersIndexRouteImport.update({
  id: '/semesters/',
  path: '/semesters/',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const ProtectedInstructorsIndexRoute =
  ProtectedInstructorsIndexRouteImport.update({
    id: '/instructors/',
    path: '/instructors/',
    getParentRoute: () => ProtectedRouteRoute,
  } as any)
const ProtectedDepartmentsIndexRoute =
  ProtectedDepartmentsIndexRouteImport.update({
    id: '/departments/',
    path: '/departments/',
    getParentRoute: () => ProtectedRouteRoute,
  } as any)
const ProtectedDashboardIndexRoute = ProtectedDashboardIndexRouteImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const ProtectedCoursesIndexRoute = ProtectedCoursesIndexRouteImport.update({
  id: '/courses/',
  path: '/courses/',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const ProtectedClassesIndexRoute = ProtectedClassesIndexRouteImport.update({
  id: '/classes/',
  path: '/classes/',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const ProtectedAdminsIndexRoute = ProtectedAdminsIndexRouteImport.update({
  id: '/admins/',
  path: '/admins/',
  getParentRoute: () => ProtectedRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admins': typeof ProtectedAdminsIndexRoute
  '/classes': typeof ProtectedClassesIndexRoute
  '/courses': typeof ProtectedCoursesIndexRoute
  '/dashboard': typeof ProtectedDashboardIndexRoute
  '/departments': typeof ProtectedDepartmentsIndexRoute
  '/instructors': typeof ProtectedInstructorsIndexRoute
  '/semesters': typeof ProtectedSemestersIndexRoute
  '/students': typeof ProtectedStudentsIndexRoute
  '/login': typeof UnprotectedLoginIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admins': typeof ProtectedAdminsIndexRoute
  '/classes': typeof ProtectedClassesIndexRoute
  '/courses': typeof ProtectedCoursesIndexRoute
  '/dashboard': typeof ProtectedDashboardIndexRoute
  '/departments': typeof ProtectedDepartmentsIndexRoute
  '/instructors': typeof ProtectedInstructorsIndexRoute
  '/semesters': typeof ProtectedSemestersIndexRoute
  '/students': typeof ProtectedStudentsIndexRoute
  '/login': typeof UnprotectedLoginIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_protected': typeof ProtectedRouteRouteWithChildren
  '/_unprotected': typeof UnprotectedRouteRouteWithChildren
  '/_protected/admins/': typeof ProtectedAdminsIndexRoute
  '/_protected/classes/': typeof ProtectedClassesIndexRoute
  '/_protected/courses/': typeof ProtectedCoursesIndexRoute
  '/_protected/dashboard/': typeof ProtectedDashboardIndexRoute
  '/_protected/departments/': typeof ProtectedDepartmentsIndexRoute
  '/_protected/instructors/': typeof ProtectedInstructorsIndexRoute
  '/_protected/semesters/': typeof ProtectedSemestersIndexRoute
  '/_protected/students/': typeof ProtectedStudentsIndexRoute
  '/_unprotected/login/': typeof UnprotectedLoginIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admins'
    | '/classes'
    | '/courses'
    | '/dashboard'
    | '/departments'
    | '/instructors'
    | '/semesters'
    | '/students'
    | '/login'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admins'
    | '/classes'
    | '/courses'
    | '/dashboard'
    | '/departments'
    | '/instructors'
    | '/semesters'
    | '/students'
    | '/login'
  id:
    | '__root__'
    | '/'
    | '/_protected'
    | '/_unprotected'
    | '/_protected/admins/'
    | '/_protected/classes/'
    | '/_protected/courses/'
    | '/_protected/dashboard/'
    | '/_protected/departments/'
    | '/_protected/instructors/'
    | '/_protected/semesters/'
    | '/_protected/students/'
    | '/_unprotected/login/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedRouteRoute: typeof ProtectedRouteRouteWithChildren
  UnprotectedRouteRoute: typeof UnprotectedRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_unprotected': {
      id: '/_unprotected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof UnprotectedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_unprotected/login/': {
      id: '/_unprotected/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof UnprotectedLoginIndexRouteImport
      parentRoute: typeof UnprotectedRouteRoute
    }
    '/_protected/students/': {
      id: '/_protected/students/'
      path: '/students'
      fullPath: '/students'
      preLoaderRoute: typeof ProtectedStudentsIndexRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_protected/semesters/': {
      id: '/_protected/semesters/'
      path: '/semesters'
      fullPath: '/semesters'
      preLoaderRoute: typeof ProtectedSemestersIndexRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_protected/instructors/': {
      id: '/_protected/instructors/'
      path: '/instructors'
      fullPath: '/instructors'
      preLoaderRoute: typeof ProtectedInstructorsIndexRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_protected/departments/': {
      id: '/_protected/departments/'
      path: '/departments'
      fullPath: '/departments'
      preLoaderRoute: typeof ProtectedDepartmentsIndexRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_protected/dashboard/': {
      id: '/_protected/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof ProtectedDashboardIndexRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_protected/courses/': {
      id: '/_protected/courses/'
      path: '/courses'
      fullPath: '/courses'
      preLoaderRoute: typeof ProtectedCoursesIndexRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_protected/classes/': {
      id: '/_protected/classes/'
      path: '/classes'
      fullPath: '/classes'
      preLoaderRoute: typeof ProtectedClassesIndexRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_protected/admins/': {
      id: '/_protected/admins/'
      path: '/admins'
      fullPath: '/admins'
      preLoaderRoute: typeof ProtectedAdminsIndexRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
  }
}

interface ProtectedRouteRouteChildren {
  ProtectedAdminsIndexRoute: typeof ProtectedAdminsIndexRoute
  ProtectedClassesIndexRoute: typeof ProtectedClassesIndexRoute
  ProtectedCoursesIndexRoute: typeof ProtectedCoursesIndexRoute
  ProtectedDashboardIndexRoute: typeof ProtectedDashboardIndexRoute
  ProtectedDepartmentsIndexRoute: typeof ProtectedDepartmentsIndexRoute
  ProtectedInstructorsIndexRoute: typeof ProtectedInstructorsIndexRoute
  ProtectedSemestersIndexRoute: typeof ProtectedSemestersIndexRoute
  ProtectedStudentsIndexRoute: typeof ProtectedStudentsIndexRoute
}

const ProtectedRouteRouteChildren: ProtectedRouteRouteChildren = {
  ProtectedAdminsIndexRoute: ProtectedAdminsIndexRoute,
  ProtectedClassesIndexRoute: ProtectedClassesIndexRoute,
  ProtectedCoursesIndexRoute: ProtectedCoursesIndexRoute,
  ProtectedDashboardIndexRoute: ProtectedDashboardIndexRoute,
  ProtectedDepartmentsIndexRoute: ProtectedDepartmentsIndexRoute,
  ProtectedInstructorsIndexRoute: ProtectedInstructorsIndexRoute,
  ProtectedSemestersIndexRoute: ProtectedSemestersIndexRoute,
  ProtectedStudentsIndexRoute: ProtectedStudentsIndexRoute,
}

const ProtectedRouteRouteWithChildren = ProtectedRouteRoute._addFileChildren(
  ProtectedRouteRouteChildren,
)

interface UnprotectedRouteRouteChildren {
  UnprotectedLoginIndexRoute: typeof UnprotectedLoginIndexRoute
}

const UnprotectedRouteRouteChildren: UnprotectedRouteRouteChildren = {
  UnprotectedLoginIndexRoute: UnprotectedLoginIndexRoute,
}

const UnprotectedRouteRouteWithChildren =
  UnprotectedRouteRoute._addFileChildren(UnprotectedRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedRouteRoute: ProtectedRouteRouteWithChildren,
  UnprotectedRouteRoute: UnprotectedRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
